import { IonicNativePlugin } from '@ionic-native/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export interface NotificationData {
    /**
     * Determines whether the notification was pressed or not
     */
    wasTapped: boolean;
    /**
     * Notification data hash item
     */
    [name: string]: any;
}
/**
 * @name FCM
 * @description
 * Provides basic functionality for Firebase Cloud Messaging
 *
 * @usage
 * ```typescript
 * import { FCM } from '@ionic-native/fcm/ngx';
 *
 * constructor(private fcm: FCM) {}
 *
 * ...
 *
 * this.fcm.subscribeToTopic('marketing');
 *
 * this.fcm.getToken().then(token => {
 *   backend.registerToken(token);
 * });
 *
 * this.fcm.onNotification().subscribe(data => {
 *   if(data.wasTapped){
 *     console.log("Received in background");
 *   } else {
 *     console.log("Received in foreground");
 *   };
 * });
 *
 * this.fcm.onTokenRefresh().subscribe(token => {
 *   backend.registerToken(token);
 * });
 *
 * this.fcm.hasPermission().then(hasPermission => {
 *   if (hasPermission) {
 *     console.log("Has permission!");
 *   }
 * })
 *
 * this.fcm.clearAllNotifications();
 *
 * this.fcm.unsubscribeFromTopic('marketing');
 *
 * ```
 * @interfaces
 * NotificationData
 */
export declare class FCM extends IonicNativePlugin {
    /**
     * Gets ios device's current APNS token
     *
     * @returns {Promise<string>} Returns a Promise that resolves with the APNS token
     */
    getAPNSToken(): Promise<string>;
    /**
     * Gets device's current registration id
     *
     * @returns {Promise<string>} Returns a Promise that resolves with the registration id token
     */
    getToken(): Promise<string>;
    /**
     * Event firing on the token refresh
     *
     * @returns {Observable<string>} Returns an Observable that notifies with the change of device's registration id
     */
    onTokenRefresh(): Observable<string>;
    /**
     * Subscribes you to a [topic](https://firebase.google.com/docs/notifications/android/console-topics)
     *
     * @param {string} topic Topic to be subscribed to
     *
     * @returns {Promise<any>} Returns a promise resolving in result of subscribing to a topic
     */
    subscribeToTopic(topic: string): Promise<any>;
    /**
     * Unsubscribes you from a [topic](https://firebase.google.com/docs/notifications/android/console-topics)
     *
     * @param {string} topic Topic to be unsubscribed from
     *
     * @returns {Promise<any>} Returns a promise resolving in result of unsubscribing from a topic
     */
    unsubscribeFromTopic(topic: string): Promise<any>;
    /**
     * Checking for permissions on iOS. On android, it always returns `true`.
     *
     * @returns {Promise<boolean | null>} Returns a Promise:
     * - true: push was allowed (or platform is android)
     * - false: push will not be available
     * - null: still not answered, recommended checking again later.
     */
    hasPermission(): Promise<boolean | null>;
    /**
     * Watch for incoming notifications
     *
     * @returns {Observable<any>} returns an object with data from the notification
     */
    onNotification(): Observable<NotificationData>;
    /**
     * Removes existing push notifications from the notifications center
     *
     * @returns {Promise<void>}
     */
    clearAllNotifications(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FCM, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<FCM>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5leHBvcnQgaW50ZXJmYWNlIE5vdGlmaWNhdGlvbkRhdGEge1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGUgbm90aWZpY2F0aW9uIHdhcyBwcmVzc2VkIG9yIG5vdFxuICAgICAqL1xuICAgIHdhc1RhcHBlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBOb3RpZmljYXRpb24gZGF0YSBoYXNoIGl0ZW1cbiAgICAgKi9cbiAgICBbbmFtZTogc3RyaW5nXTogYW55O1xufVxuLyoqXG4gKiBAbmFtZSBGQ01cbiAqIEBkZXNjcmlwdGlvblxuICogUHJvdmlkZXMgYmFzaWMgZnVuY3Rpb25hbGl0eSBmb3IgRmlyZWJhc2UgQ2xvdWQgTWVzc2FnaW5nXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBGQ00gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2ZjbS9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZmNtOiBGQ00pIHt9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5mY20uc3Vic2NyaWJlVG9Ub3BpYygnbWFya2V0aW5nJyk7XG4gKlxuICogdGhpcy5mY20uZ2V0VG9rZW4oKS50aGVuKHRva2VuID0+IHtcbiAqICAgYmFja2VuZC5yZWdpc3RlclRva2VuKHRva2VuKTtcbiAqIH0pO1xuICpcbiAqIHRoaXMuZmNtLm9uTm90aWZpY2F0aW9uKCkuc3Vic2NyaWJlKGRhdGEgPT4ge1xuICogICBpZihkYXRhLndhc1RhcHBlZCl7XG4gKiAgICAgY29uc29sZS5sb2coXCJSZWNlaXZlZCBpbiBiYWNrZ3JvdW5kXCIpO1xuICogICB9IGVsc2Uge1xuICogICAgIGNvbnNvbGUubG9nKFwiUmVjZWl2ZWQgaW4gZm9yZWdyb3VuZFwiKTtcbiAqICAgfTtcbiAqIH0pO1xuICpcbiAqIHRoaXMuZmNtLm9uVG9rZW5SZWZyZXNoKCkuc3Vic2NyaWJlKHRva2VuID0+IHtcbiAqICAgYmFja2VuZC5yZWdpc3RlclRva2VuKHRva2VuKTtcbiAqIH0pO1xuICpcbiAqIHRoaXMuZmNtLmhhc1Blcm1pc3Npb24oKS50aGVuKGhhc1Blcm1pc3Npb24gPT4ge1xuICogICBpZiAoaGFzUGVybWlzc2lvbikge1xuICogICAgIGNvbnNvbGUubG9nKFwiSGFzIHBlcm1pc3Npb24hXCIpO1xuICogICB9XG4gKiB9KVxuICpcbiAqIHRoaXMuZmNtLmNsZWFyQWxsTm90aWZpY2F0aW9ucygpO1xuICpcbiAqIHRoaXMuZmNtLnVuc3Vic2NyaWJlRnJvbVRvcGljKCdtYXJrZXRpbmcnKTtcbiAqXG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBOb3RpZmljYXRpb25EYXRhXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEZDTSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIGlvcyBkZXZpY2UncyBjdXJyZW50IEFQTlMgdG9rZW5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgQVBOUyB0b2tlblxuICAgICAqL1xuICAgIGdldEFQTlNUb2tlbigpOiBQcm9taXNlPHN0cmluZz47XG4gICAgLyoqXG4gICAgICogR2V0cyBkZXZpY2UncyBjdXJyZW50IHJlZ2lzdHJhdGlvbiBpZFxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSByZWdpc3RyYXRpb24gaWQgdG9rZW5cbiAgICAgKi9cbiAgICBnZXRUb2tlbigpOiBQcm9taXNlPHN0cmluZz47XG4gICAgLyoqXG4gICAgICogRXZlbnQgZmlyaW5nIG9uIHRoZSB0b2tlbiByZWZyZXNoXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxzdHJpbmc+fSBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBub3RpZmllcyB3aXRoIHRoZSBjaGFuZ2Ugb2YgZGV2aWNlJ3MgcmVnaXN0cmF0aW9uIGlkXG4gICAgICovXG4gICAgb25Ub2tlblJlZnJlc2goKTogT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgeW91IHRvIGEgW3RvcGljXShodHRwczovL2ZpcmViYXNlLmdvb2dsZS5jb20vZG9jcy9ub3RpZmljYXRpb25zL2FuZHJvaWQvY29uc29sZS10b3BpY3MpXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdG9waWMgVG9waWMgdG8gYmUgc3Vic2NyaWJlZCB0b1xuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgcmVzb2x2aW5nIGluIHJlc3VsdCBvZiBzdWJzY3JpYmluZyB0byBhIHRvcGljXG4gICAgICovXG4gICAgc3Vic2NyaWJlVG9Ub3BpYyh0b3BpYzogc3RyaW5nKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIFVuc3Vic2NyaWJlcyB5b3UgZnJvbSBhIFt0b3BpY10oaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3Mvbm90aWZpY2F0aW9ucy9hbmRyb2lkL2NvbnNvbGUtdG9waWNzKVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRvcGljIFRvcGljIHRvIGJlIHVuc3Vic2NyaWJlZCBmcm9tXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSByZXNvbHZpbmcgaW4gcmVzdWx0IG9mIHVuc3Vic2NyaWJpbmcgZnJvbSBhIHRvcGljXG4gICAgICovXG4gICAgdW5zdWJzY3JpYmVGcm9tVG9waWModG9waWM6IHN0cmluZyk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBDaGVja2luZyBmb3IgcGVybWlzc2lvbnMgb24gaU9TLiBPbiBhbmRyb2lkLCBpdCBhbHdheXMgcmV0dXJucyBgdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuIHwgbnVsbD59IFJldHVybnMgYSBQcm9taXNlOlxuICAgICAqIC0gdHJ1ZTogcHVzaCB3YXMgYWxsb3dlZCAob3IgcGxhdGZvcm0gaXMgYW5kcm9pZClcbiAgICAgKiAtIGZhbHNlOiBwdXNoIHdpbGwgbm90IGJlIGF2YWlsYWJsZVxuICAgICAqIC0gbnVsbDogc3RpbGwgbm90IGFuc3dlcmVkLCByZWNvbW1lbmRlZCBjaGVja2luZyBhZ2FpbiBsYXRlci5cbiAgICAgKi9cbiAgICBoYXNQZXJtaXNzaW9uKCk6IFByb21pc2U8Ym9vbGVhbiB8IG51bGw+O1xuICAgIC8qKlxuICAgICAqIFdhdGNoIGZvciBpbmNvbWluZyBub3RpZmljYXRpb25zXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fSByZXR1cm5zIGFuIG9iamVjdCB3aXRoIGRhdGEgZnJvbSB0aGUgbm90aWZpY2F0aW9uXG4gICAgICovXG4gICAgb25Ob3RpZmljYXRpb24oKTogT2JzZXJ2YWJsZTxOb3RpZmljYXRpb25EYXRhPjtcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGV4aXN0aW5nIHB1c2ggbm90aWZpY2F0aW9ucyBmcm9tIHRoZSBub3RpZmljYXRpb25zIGNlbnRlclxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAgICovXG4gICAgY2xlYXJBbGxOb3RpZmljYXRpb25zKCk6IHZvaWQ7XG59XG4iXX0=