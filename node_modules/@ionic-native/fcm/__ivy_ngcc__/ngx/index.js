import { __decorate, __extends } from "tslib";
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
var FCM = /** @class */ (function (_super) {
    __extends(FCM, _super);
    function FCM() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FCM.prototype.getAPNSToken = function () { return cordova(this, "getAPNSToken", {}, arguments); };
    FCM.prototype.getToken = function () { return cordova(this, "getToken", {}, arguments); };
    FCM.prototype.onTokenRefresh = function () { return cordova(this, "onTokenRefresh", { "observable": true }, arguments); };
    FCM.prototype.subscribeToTopic = function (topic) { return cordova(this, "subscribeToTopic", {}, arguments); };
    FCM.prototype.unsubscribeFromTopic = function (topic) { return cordova(this, "unsubscribeFromTopic", {}, arguments); };
    FCM.prototype.hasPermission = function () { return cordova(this, "hasPermission", {}, arguments); };
    FCM.prototype.onNotification = function () { return cordova(this, "onNotification", { "observable": true, "successIndex": 0, "errorIndex": 2 }, arguments); };
    FCM.prototype.clearAllNotifications = function () { return cordova(this, "clearAllNotifications", {}, arguments); };
    FCM.pluginName = "FCM";
    FCM.plugin = "cordova-plugin-fcm-with-dependecy-updated";
    FCM.pluginRef = "FCMPlugin";
    FCM.repo = "https://github.com/andrehtissot/cordova-plugin-fcm-with-dependecy-updated";
    FCM.platforms = ["Android", "iOS"];
FCM.ɵfac = function FCM_Factory(t) { return ɵFCM_BaseFactory(t || FCM); };
FCM.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FCM, factory: function (t) { return FCM.ɵfac(t); } });
var ɵFCM_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FCM);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FCM, [{
        type: Injectable
    }], null, null); })();
    return FCM;
}(IonicNativePlugin));
export { FCM };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvZmNtL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBQ2xDO0FBR0UsSUFpRXVCLHVCQUFpQjtBQUFDO0FBRTlCO0FBRTBCO0FBQU0sSUFHM0MsMEJBQVk7QUFLYyxJQUsxQixzQkFBUTtBQUtjLElBT3RCLDRCQUFjO0FBSytCLElBTzdDLDhCQUFnQixhQUFDLEtBQWE7QUFLVCxJQU9yQixrQ0FBb0IsYUFBQyxLQUFhO0FBS1QsSUFRekIsMkJBQWE7QUFLTSxJQVNuQiw0QkFBYztBQU1kLElBSUEsbUNBQXFCO0FBSThCO0FBQTRCO0FBQThEO0FBQWlDO0FBQTRGO0lBOUYvUCxHQUFHLHdCQURmLFVBQVUsRUFBRSxRQUNBLEdBQUc7Ozs7OzBCQUFFO0FBQUMsY0F2RW5CO0FBQUUsRUF1RXVCLGlCQUFpQjtBQUN6QyxTQURZLEdBQUc7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE5vdGlmaWNhdGlvbkRhdGEge1xuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBub3RpZmljYXRpb24gd2FzIHByZXNzZWQgb3Igbm90XG4gICAqL1xuXG4gIHdhc1RhcHBlZDogYm9vbGVhbjtcblxuICAvKipcbiAgICogTm90aWZpY2F0aW9uIGRhdGEgaGFzaCBpdGVtXG4gICAqL1xuXG4gIFtuYW1lOiBzdHJpbmddOiBhbnk7XG59XG5cbi8qKlxuICogQG5hbWUgRkNNXG4gKiBAZGVzY3JpcHRpb25cbiAqIFByb3ZpZGVzIGJhc2ljIGZ1bmN0aW9uYWxpdHkgZm9yIEZpcmViYXNlIENsb3VkIE1lc3NhZ2luZ1xuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgRkNNIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9mY20vbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGZjbTogRkNNKSB7fVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMuZmNtLnN1YnNjcmliZVRvVG9waWMoJ21hcmtldGluZycpO1xuICpcbiAqIHRoaXMuZmNtLmdldFRva2VuKCkudGhlbih0b2tlbiA9PiB7XG4gKiAgIGJhY2tlbmQucmVnaXN0ZXJUb2tlbih0b2tlbik7XG4gKiB9KTtcbiAqXG4gKiB0aGlzLmZjbS5vbk5vdGlmaWNhdGlvbigpLnN1YnNjcmliZShkYXRhID0+IHtcbiAqICAgaWYoZGF0YS53YXNUYXBwZWQpe1xuICogICAgIGNvbnNvbGUubG9nKFwiUmVjZWl2ZWQgaW4gYmFja2dyb3VuZFwiKTtcbiAqICAgfSBlbHNlIHtcbiAqICAgICBjb25zb2xlLmxvZyhcIlJlY2VpdmVkIGluIGZvcmVncm91bmRcIik7XG4gKiAgIH07XG4gKiB9KTtcbiAqXG4gKiB0aGlzLmZjbS5vblRva2VuUmVmcmVzaCgpLnN1YnNjcmliZSh0b2tlbiA9PiB7XG4gKiAgIGJhY2tlbmQucmVnaXN0ZXJUb2tlbih0b2tlbik7XG4gKiB9KTtcbiAqXG4gKiB0aGlzLmZjbS5oYXNQZXJtaXNzaW9uKCkudGhlbihoYXNQZXJtaXNzaW9uID0+IHtcbiAqICAgaWYgKGhhc1Blcm1pc3Npb24pIHtcbiAqICAgICBjb25zb2xlLmxvZyhcIkhhcyBwZXJtaXNzaW9uIVwiKTtcbiAqICAgfVxuICogfSlcbiAqXG4gKiB0aGlzLmZjbS5jbGVhckFsbE5vdGlmaWNhdGlvbnMoKTtcbiAqXG4gKiB0aGlzLmZjbS51bnN1YnNjcmliZUZyb21Ub3BpYygnbWFya2V0aW5nJyk7XG4gKlxuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogTm90aWZpY2F0aW9uRGF0YVxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0ZDTScsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWZjbS13aXRoLWRlcGVuZGVjeS11cGRhdGVkJyxcbiAgcGx1Z2luUmVmOiAnRkNNUGx1Z2luJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9hbmRyZWh0aXNzb3QvY29yZG92YS1wbHVnaW4tZmNtLXdpdGgtZGVwZW5kZWN5LXVwZGF0ZWQnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRkNNIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogR2V0cyBpb3MgZGV2aWNlJ3MgY3VycmVudCBBUE5TIHRva2VuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgQVBOUyB0b2tlblxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRBUE5TVG9rZW4oKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBkZXZpY2UncyBjdXJyZW50IHJlZ2lzdHJhdGlvbiBpZFxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHJlZ2lzdHJhdGlvbiBpZCB0b2tlblxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRUb2tlbigpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBmaXJpbmcgb24gdGhlIHRva2VuIHJlZnJlc2hcbiAgICpcbiAgICogQHJldHVybnMge09ic2VydmFibGU8c3RyaW5nPn0gUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgd2l0aCB0aGUgY2hhbmdlIG9mIGRldmljZSdzIHJlZ2lzdHJhdGlvbiBpZFxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWUsXG4gIH0pXG4gIG9uVG9rZW5SZWZyZXNoKCk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZXMgeW91IHRvIGEgW3RvcGljXShodHRwczovL2ZpcmViYXNlLmdvb2dsZS5jb20vZG9jcy9ub3RpZmljYXRpb25zL2FuZHJvaWQvY29uc29sZS10b3BpY3MpXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BpYyBUb3BpYyB0byBiZSBzdWJzY3JpYmVkIHRvXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHJlc29sdmluZyBpbiByZXN1bHQgb2Ygc3Vic2NyaWJpbmcgdG8gYSB0b3BpY1xuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdWJzY3JpYmVUb1RvcGljKHRvcGljOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZXMgeW91IGZyb20gYSBbdG9waWNdKGh0dHBzOi8vZmlyZWJhc2UuZ29vZ2xlLmNvbS9kb2NzL25vdGlmaWNhdGlvbnMvYW5kcm9pZC9jb25zb2xlLXRvcGljcylcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcGljIFRvcGljIHRvIGJlIHVuc3Vic2NyaWJlZCBmcm9tXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHJlc29sdmluZyBpbiByZXN1bHQgb2YgdW5zdWJzY3JpYmluZyBmcm9tIGEgdG9waWNcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdW5zdWJzY3JpYmVGcm9tVG9waWModG9waWM6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNraW5nIGZvciBwZXJtaXNzaW9ucyBvbiBpT1MuIE9uIGFuZHJvaWQsIGl0IGFsd2F5cyByZXR1cm5zIGB0cnVlYC5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbiB8IG51bGw+fSBSZXR1cm5zIGEgUHJvbWlzZTpcbiAgICogLSB0cnVlOiBwdXNoIHdhcyBhbGxvd2VkIChvciBwbGF0Zm9ybSBpcyBhbmRyb2lkKVxuICAgKiAtIGZhbHNlOiBwdXNoIHdpbGwgbm90IGJlIGF2YWlsYWJsZVxuICAgKiAtIG51bGw6IHN0aWxsIG5vdCBhbnN3ZXJlZCwgcmVjb21tZW5kZWQgY2hlY2tpbmcgYWdhaW4gbGF0ZXIuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGhhc1Blcm1pc3Npb24oKTogUHJvbWlzZTxib29sZWFuIHwgbnVsbD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBXYXRjaCBmb3IgaW5jb21pbmcgbm90aWZpY2F0aW9uc1xuICAgKlxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fSByZXR1cm5zIGFuIG9iamVjdCB3aXRoIGRhdGEgZnJvbSB0aGUgbm90aWZpY2F0aW9uXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICBzdWNjZXNzSW5kZXg6IDAsXG4gICAgZXJyb3JJbmRleDogMixcbiAgfSlcbiAgb25Ob3RpZmljYXRpb24oKTogT2JzZXJ2YWJsZTxOb3RpZmljYXRpb25EYXRhPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgZXhpc3RpbmcgcHVzaCBub3RpZmljYXRpb25zIGZyb20gdGhlIG5vdGlmaWNhdGlvbnMgY2VudGVyXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjbGVhckFsbE5vdGlmaWNhdGlvbnMoKTogdm9pZCB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=